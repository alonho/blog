<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alon Horev]]></title>
  <link href="http://alon.horev.net/atom.xml" rel="self"/>
  <link href="http://alon.horev.net/"/>
  <updated>2012-12-20T01:43:08+02:00</updated>
  <id>http://alon.horev.net/</id>
  <author>
    <name><![CDATA[Alon Horev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A hardware lesson for software developers: from logical gates to the game of life]]></title>
    <link href="http://alon.horev.net/blog/2012/12/03/a-hardware-lesson-for-software-developers-from-logical-gates-to-the-game-of-life/"/>
    <updated>2012-12-03T23:04:00+02:00</updated>
    <id>http://alon.horev.net/blog/2012/12/03/a-hardware-lesson-for-software-developers-from-logical-gates-to-the-game-of-life</id>
    <content type="html"><![CDATA[<p>A week ago I&#8217;ve decided to learn VHDL and as an exercise, implement <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">The game of life</a>.<br/>
VHDL is a hardware description language. Basically, it&#8217;s a programming language used by chip designers.</p>

<p>This post is an introduction to VHDL.</p>

<!-- more -->


<p><strong>Why learn VHDL?</strong><br/>
I thought it&#8217;d be interesting to see what it takes to program a chip. Coming from software, I was specifically curious about the programming model and mind set. Think about it, all software eventually translates to CPU instructions. What&#8217;s underneath that?..</p>

<p>It&#8217;s my belief that every programmer should be familiar with the layers he relies upon.<br/>
Not every Python programmer knows C, and not every C programmer knows assembler. But when the shit hits the fan, this knowledge comes in handy.</p>

<p><strong>Prerequisites</strong><br/>
I&#8217;m going to assume you know nothing about hardware and a little about software.<br/>
VHDL is based on Ada so you might even find it familiar.</p>

<h2>Intro - Booleans All The Way Down</h2>

<p>Most hardware these days is based on boolean logic, here&#8217;s why:</p>

<ul>
<li>Boolean algebra has been around for ages - simple boolean operations like &#8216;and&#8217;, &#8216;or&#8217; and &#8216;not&#8217; can be composed into basic building blocks used to construct more sophisticated logic (calculators, modems, CPUs!).</li>
<li>Passing boolean data is easy in hardware, you pass electricity through a wire to indicate a <strong>true</strong> state and stop passing electricity to indicate a <strong>false</strong> state.</li>
</ul>


<p><strong>Light bulb moment: ever wondered why integers in software are powers of two?</strong><br/>
A CPU has a fixed amount of wires (32/64) dedicated to represent data (a.k.a word size).<br/>
Each wire represents a bit that can be true or false (1 or 0).<br/>
The binary numeral system is used to represent a number in a bunch of 1s and 0s.</p>

<h2>Dive Into VHDL - The Life Of A Gate</h2>

<p>Let&#8217;s start off with an implementation of an &#8216;and&#8217; gate:</p>

<figure class='code'><figcaption><span>And Gate  (and.vhdl)</span> <a href='http://alon.horev.net/downloads/code/and.vhdl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='vhdl'><span class='line'><span class="k">library</span> <span class="nn">ieee</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">ieee.std_logic_1164.all</span><span class="p">;</span>    
</span><span class='line'>
</span><span class='line'><span class="k">entity</span> <span class="nc">and_entity</span> <span class="k">is</span>
</span><span class='line'>  <span class="k">port</span><span class="p">(</span> 
</span><span class='line'>    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">in</span> <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="n">result</span><span class="o">:</span> <span class="k">out</span> <span class="kt">std_logic</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="k">end</span> <span class="nc">and_entity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">architecture</span> <span class="nc">arch</span> <span class="k">of</span> <span class="nc">and_entity</span> <span class="k">is</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="k">and</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span> <span class="nc">arch</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s happening in the code line by line:</p>

<p><strong>1-2</strong>: Include the module that exports the std_logic type which represents a bit (can be 0 or 1).<br/>
<strong>4</strong>: Define a new entity. <strong>An entity is analogous to an object in object oriented programming</strong>.<br/>
<strong>5</strong>: The entity interacts with other entities using ports. Input ports are used to receive information and output ports are used to send information.<br/>
<strong>6</strong>: Define two inputs of type std_logic.<br/>
<strong>7</strong>: Define one output of type std_logic.<br/>
<strong>11</strong>: The architecture is the implementation of the object&#8217;s behavior. It&#8217;s name (arch) is redundant as only one architecture is allowed.<br/>
<strong>13</strong>: The implementation of an &#8216;and&#8217; gate. <strong>Every time</strong> an input changes the output is recalculated.</p>

<p>By using a synthesis tool we can convert this code to a hardware schematic:</p>

<p><img src="http://alon.horev.net/images/vhdl_post/and.png" title="Schematic of the 'and' component" ></p>

<h2>Think Parallel - A Simple Adder</h2>

<p>We&#8217;ll implement an adder that takes two 1-bit sized inputs (x and y) and adds them to a 2-bit sized output (sum_0 and sum_1. sum_1 is the carry).
The following table demonstrates the adder&#8217;s functionality:</p>

<table>
    <tr>
        <th width="60">x</th>
        <th width="60">y</th>
        <th width="60">sum_1</th>
        <th width="60">sum_0</th>
        <th width="140">sum as binary</th>
        <th width="140">sum as int</th>
    </tr>
    <tr>
        <td>0</td>
        <td>0</td>
        <td>0</td>
        <td>0</td>
        <td>0</td>
        <td>0</td>
    </tr>
    <tr>
        <td>0</td>
        <td>1</td>
        <td>0</td>
        <td>1</td>
        <td>1</td>
        <td>1</td>
    </tr>
    <tr>
        <td>1</td>
        <td>0</td>
        <td>0</td>
        <td>1</td>
        <td>1</td>
        <td>1</td>
    </tr>
    <tr>
        <td>1</td>
        <td>1</td>
        <td>1</td>
        <td>0</td>
        <td>10</td>
        <td>2</td>
    </tr>
</table>




<br/>


<p>Now let&#8217;s look at the code:</p>

<figure class='code'><figcaption><span>Adder  (adder.vhdl)</span> <a href='http://alon.horev.net/downloads/code/adder.vhdl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='vhdl'><span class='line'><span class="k">library</span> <span class="nn">ieee</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">ieee.std_logic_1164.all</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">entity</span> <span class="nc">adder</span> <span class="k">is</span>
</span><span class='line'>  <span class="k">port</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">in</span> <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum_0</span><span class="p">,</span> <span class="n">sum_1</span><span class="o">:</span> <span class="k">out</span> <span class="kt">std_logic</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="k">end</span> <span class="nc">adder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">architecture</span> <span class="nc">arch</span> <span class="k">of</span> <span class="nc">adder</span> <span class="k">is</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">sum_0</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="k">xor</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sum_1</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="k">and</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span> <span class="nc">arch</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look at lines 13-14. When does this code execute? Is line 13 executed before line 14?<br/>
The answer is: these lines execute all the time, <strong>in parallel!</strong></p>

<blockquote><p>A major difference between software written for CPUs and VHDL is:<br/>
<strong>VHDL is concurrent by default</strong>.</p></blockquote>

<p>VHDL has the notion of <em>concurrent</em> statements vs. <em>sequential</em> statements.<br/>
Sequential statements can be used to implement state machines and other sequential logic.</p>

<h2>Testing Using Sequential Code</h2>

<p>The hardware manufacturing phase of a chip is long and expensive, therefore, VHDL programmers (often called designers) write tests (often called &#8216;test-benches&#8217; or &#8216;simulations&#8217;).</p>

<p>The following test code will verify the adder&#8217;s functionality by driving different inputs and verifying the output (explanation ahead):</p>

<figure class='code'><figcaption><span>Test Adder  (test_adder.vhdl)</span> <a href='http://alon.horev.net/downloads/code/test_adder.vhdl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='vhdl'><span class='line'><span class="k">library</span> <span class="nn">ieee</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">ieee.std_logic_1164.all</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">entity</span> <span class="nc">adder_test</span> <span class="k">is</span>
</span><span class='line'><span class="k">end</span> <span class="nc">adder_test</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">architecture</span> <span class="nc">arch</span> <span class="k">of</span> <span class="nc">adder_test</span> <span class="k">is</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">component</span> <span class="nc">adder</span> <span class="k">is</span>
</span><span class='line'>    <span class="k">port</span> <span class="p">(</span>
</span><span class='line'>      <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="k">in</span> <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sum_0</span><span class="p">,</span> <span class="n">sum_1</span><span class="o">:</span> <span class="k">out</span> <span class="kt">std_logic</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">component</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">signal</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sum_0</span><span class="p">,</span> <span class="n">sum_1</span><span class="o">:</span> <span class="kt">std_logic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">adder_0</span><span class="o">:</span> <span class="n">adder</span> <span class="k">port</span> <span class="k">map</span> <span class="p">(</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=&gt;</span> <span class="n">y</span><span class="p">,</span>
</span><span class='line'>      <span class="n">sum_0</span> <span class="o">=&gt;</span> <span class="n">sum_0</span><span class="p">,</span> <span class="n">sum_1</span> <span class="o">=&gt;</span> <span class="n">sum_1</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">process</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">&lt;=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">&lt;=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">wait</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">ns</span><span class="p">;</span>
</span><span class='line'>      <span class="k">assert</span> <span class="n">sum_1</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span> <span class="k">and</span> <span class="n">sum_0</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span>
</span><span class='line'>        <span class="n">report</span> <span class="s">&quot;result should be 2&quot;</span> <span class="k">severity</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">wait</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">ns</span><span class="p">;</span>
</span><span class='line'>      <span class="k">assert</span> <span class="n">sum_1</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span> <span class="k">and</span> <span class="n">sum_0</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span>
</span><span class='line'>        <span class="n">report</span> <span class="s">&quot;result should be 0&quot;</span> <span class="k">severity</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">&lt;=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">wait</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">ns</span><span class="p">;</span>
</span><span class='line'>      <span class="k">assert</span> <span class="n">sum_1</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span> <span class="k">and</span> <span class="n">sum_0</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span>
</span><span class='line'>        <span class="n">report</span> <span class="s">&quot;result should be 1&quot;</span> <span class="k">severity</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">&lt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">&lt;=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">wait</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">ns</span><span class="p">;</span>
</span><span class='line'>      <span class="k">assert</span> <span class="n">sum_1</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span> <span class="k">and</span> <span class="n">sum_0</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span>
</span><span class='line'>        <span class="n">report</span> <span class="s">&quot;result should be 1&quot;</span> <span class="k">severity</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">wait</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span> <span class="nc">arch</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>4</strong>: Define an entity for the test. This entity has no inputs and outputs.<br/>
<strong>9-14</strong>: Repetition of the adder&#8217;s interface (VHDL isn&#8217;t very DRY)<br/>
<strong>16</strong>: Signals are wires that the test can manipulate. their type is std_logic (a bit)<br/>
<strong>19-22</strong>: A port map connects the signals to the adder&#8217;s ports. I&#8217;ve named the signals exactly as the adder&#8217;s ports.<br/>
<strong>24</strong>: The process definition. A process contains a list of <strong>sequential</strong> statements. Multiple processes run concurrently.<br/>
<strong>26-27</strong>: Signal assignments.<br/>
<strong>28</strong>: Signals have an interesting behavior where the assignment takes effect only when calling &#8216;wait&#8217;. This is a feature and not a bug as it allows doing atomic changes over multiple signals.<br/>
<strong>29</strong>: Assert the sum changed. In case an assertion fails, the program will stop with an error.<br/>
<strong>30 Until the end</strong>: Test the remaining cases.</p>

<p>We can instruct the VHDL compiler to generate a waveform of the simulation:</p>

<p><img src="http://alon.horev.net/images/vhdl_post/adder_test.png" width="800" height="300" title="Waveform of adder_test.vhdl" ></p>

<p><strong>Note</strong>: Some VHDL statements are not <em>synthesizable</em>, meaning they cannot be converted to hardware and can only be used for simulations.<br/>
An example is the <em>wait</em> statement. A 1 nano second sleep cannot be expressed solely by logical gates.
The solution for time-aware components is connecting to a high speed clock (Implemented using a <a href="http://en.wikipedia.org/wiki/Crystal_oscillator">Crystal oscillator</a>), we&#8217;ll see an example ahead.</p>

<p><strong>Another Note</strong>: Not every integer addition requires a custom adder implementation.<br/>
VHDL supports integers and arithmetic operations natively.</p>

<h2>The Game Of Life</h2>

<p>Let&#8217;s start with a typical <strong>software-based</strong> solution:</p>

<ol>
<li>The board is a matrix of booleans representing cells.</li>
<li>For each cycle: the next board is generated by iterating over the matrix. For each cell: count it&#8217;s neighbors and determine if it should live or die.</li>
</ol>


<p>When trying to apply this design in VHDL I quickly ran into brick walls. A sequential iteration over an entire matrix is not the VHDL &#8216;way&#8217;. My guess is that a sequential design would generate much more logical gates and perhaps even be slower.</p>

<blockquote><p>Software is often bound by memory and CPU.<br/>
Chip design is often bound by the amount of gates and timing issues, which surface when signals travel through large amounts of gates.</p></blockquote>

<p>VHDL encourages you to build small components and inter-connect them where needed.<br/>
each component has it&#8217;s own hardware resources and works in parallel to others.</p>

<p>The design I came up with is the following:</p>

<ol>
<li><em>Cell</em> - Is an entity. Connected to it&#8217;s neighbors via ports. The cell waits for a clock signal, counts his live neighbors and sets it&#8217;s alive state.</li>
<li><em>Board</em> - Is another entity. Contains a matrix of cells. All it does is inter-connects them.</li>
</ol>


<p>Here&#8217;s the cell&#8217;s code:</p>

<figure class='code'><figcaption><span>Cell  (cell.vhdl)</span> <a href='http://alon.horev.net/downloads/code/cell.vhdl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='vhdl'><span class='line'><span class="k">entity</span> <span class="nc">cell</span> <span class="k">is</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">generic</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">start_alive</span> <span class="o">:</span> <span class="kt">integer</span> <span class="k">range</span> <span class="mi">0</span> <span class="k">to</span> <span class="mi">1</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">port</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">clock</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span>
</span><span class='line'>    <span class="n">upper_left</span><span class="p">,</span> <span class="n">upper</span><span class="p">,</span> <span class="n">upper_right</span><span class="p">,</span>
</span><span class='line'>    <span class="n">lower_left</span><span class="p">,</span> <span class="n">lower</span><span class="p">,</span> <span class="n">lower_right</span> <span class="o">:</span> <span class="k">in</span> <span class="kt">integer</span> <span class="k">range</span> <span class="mi">0</span> <span class="k">to</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">alive</span> <span class="o">:</span> <span class="k">inout</span> <span class="kt">integer</span> <span class="k">range</span> <span class="mi">0</span> <span class="k">to</span> <span class="mi">1</span> <span class="o">:=</span> <span class="n">start_alive</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span> <span class="nc">cell</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">architecture</span> <span class="nc">arch</span> <span class="k">of</span> <span class="nc">cell</span> <span class="k">is</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">process</span> <span class="p">(</span><span class="n">clock</span><span class="p">)</span>
</span><span class='line'>    <span class="k">variable</span> <span class="n">neighbors</span><span class="o">:</span> <span class="kt">integer</span> <span class="k">range</span> <span class="mi">0</span> <span class="k">to</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">neighbors</span> <span class="o">:=</span> <span class="n">upper_left</span> <span class="o">+</span> <span class="n">upper</span> <span class="o">+</span> <span class="n">upper_right</span> <span class="o">+</span> <span class="n">left</span> <span class="o">+</span>
</span><span class='line'>                   <span class="n">right</span> <span class="o">+</span> <span class="n">lower_left</span> <span class="o">+</span> <span class="n">lower</span> <span class="o">+</span> <span class="n">lower_right</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">neighbors</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span> <span class="k">or</span> <span class="p">(</span><span class="n">alive</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">and</span> <span class="p">(</span><span class="n">neighbors</span><span class="p">)</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">alive</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">alive</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">process</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span> <span class="nc">arch</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3</strong>: <em>Generics</em> are variables that can be set upon entity instantiation. Somewhat similar to constructor arguments in object oriented languages.<br/>
<strong>4-11</strong>: The alive bits are defined as integers of one bit. In contrast to <em>std_logic</em>, integers support arithmetic operations, even though both are implemented as a single wire.<br/>
<strong>19</strong>: Notice the process gets an argument? A process can state a list of signals (also called a <em>sensitivity list</em>) that should trigger it&#8217;s invocation. That way, the cell will calculate it&#8217;s next state every time the clock changes.<br/>
<strong>20</strong>: Variables are exactly what you think they. Notice we limit the integer&#8217;s range to 8? that&#8217;s because we&#8217;ll have a maximum of 8 neighbors. VHDL will dedicate only 4 wires for that variable.</p>

<h2>Testing A Cell</h2>

<p>The cell&#8217;s test is very similar to the adder&#8217;s test so here&#8217;s just a snippet:</p>

<figure class='code'><figcaption><span>Cell test </span><a href='https://github.com/alonho/game_of_life_vhdl/blob/master/cell_test.vhdl'>cell_test.vhdl </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='vhdl'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- 0 ns</span>
</span><span class='line'><span class="n">clock</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">clock</span><span class="p">;</span> <span class="c1">-- invert the clock!</span>
</span><span class='line'><span class="k">wait</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">ns</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span> <span class="n">alive</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">report</span> <span class="s">&quot;cell should start as dead&quot;</span> <span class="k">severity</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- 1 ns</span>
</span><span class='line'><span class="n">left</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">right</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">clock</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">clock</span><span class="p">;</span>
</span><span class='line'><span class="k">wait</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">ns</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span> <span class="n">alive</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">report</span> <span class="s">&quot;cell should stay dead with only two live neighbors&quot;</span> <span class="k">severity</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- 2 ns</span>
</span><span class='line'><span class="n">lower</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">clock</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">clock</span><span class="p">;</span>
</span><span class='line'><span class="k">wait</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">ns</span><span class="p">;</span>
</span><span class='line'><span class="k">assert</span> <span class="n">alive</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">report</span> <span class="s">&quot;cell should come to life&quot;</span> <span class="k">severity</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following wave form can be generated from the test:</p>

<p><img src="http://alon.horev.net/images/vhdl_post/cell_test.png" title="Cell test waveform" ></p>

<h2>Composing A Board From Cells</h2>

<p>I&#8217;ll spare you of the <a href="https://github.com/alonho/game_of_life_vhdl/blob/master/board.vhdl">board&#8217;s code</a> as it contains some boilerplate. Instead, I&#8217;ll show it&#8217;s hardware specification:</p>

<p><img src="http://alon.horev.net/images/vhdl_post/board.png" title="Schematic of a two cell board" ></p>

<p>What are you seeing:</p>

<ul>
<li>Each cell is a component encapsulating it&#8217;s logical gates.</li>
<li>Each cell is connected to it&#8217;s neighbors through signals. The left cell is connected to the right cell&#8217;s alive signal and vice versa.</li>
<li>All cells are connected to the same clock, which triggers the calculation of the next state.</li>
</ul>


<h2>Conclusions</h2>

<p><strong>Scalability - How does the design scale for a large amount of cells?</strong></p>

<p>The software-based solution has several limits:</p>

<ul>
<li>Memory-wise: limited by the amount of memory.</li>
<li>Speed-wise: iteration is done serially and will be directly proportional to the amount of cells, even if multiple cores are utilized.</li>
</ul>


<p>The hardware-based solution is said to be scalable:</p>

<ul>
<li>Adding more cells results in adding more logical gates.</li>
<li>There is no performance overhead and no arbitrary limit on the number of cells in the matrix.</li>
</ul>


<p><strong>How different is the mind-set?</strong></p>

<p>One of the most challenging concepts in software is concurrency, it&#8217;s interesting how fundamental this topic is to hardware. Here&#8217;s how I see it:</p>

<blockquote><p>Software - write serial code, parallelize when need to scale.<br/>
Hardware - write concurrent code, write serial code where needed.</p></blockquote>

<p><strong>Why bother manufacturing new chips and not re-use CPUs?</strong></p>

<ol>
<li><em>Performance</em> of ASICs (Application specific integrated circuits - chips created for a specific task) can be better than a CPU&#8217;s (That&#8217;s why GPUs became popular).</li>
<li><em>Power consumption</em> of CPUs can render them unusable for many applications.</li>
<li><em>Price per unit</em> can drop drastically for large amounts of ASICs (compare a GPS chip to an Intel CPU).</li>
</ol>


<h2>References</h2>

<ul>
<li>The <a href="https://github.com/alonho/game_of_life_vhdl">github repo</a> contains the source and a makefile for compiling, running tests and generating waveforms.</li>
<li><a href="http://ghdl.free.fr/">ghdl</a> is a VHDL compiler (that even works on mac).</li>
<li><a href="http://gtkwave.sourceforge.net/">gtkwave</a> is used for visualizing simulations.</li>
<li><a href="http://www.xilinx.com/products/design-tools/ise-design-suite/ise-webpack.htm">Xilinix</a> is used for schematic generation.</li>
</ul>

]]></content>
  </entry>
  
</feed>
